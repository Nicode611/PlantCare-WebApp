generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL") 
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  // Bcrypt-hashed password
  password      String?  @db.VarChar(255)
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation : un User possède plusieurs Plant
  plants   Plant[]
  tasks Task[]
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Plant {
  id             Int       @id @default(autoincrement())
  userId         String    @map("user_id")
  modelId        Int       @map("model_id")
  location       String    @map("location")
  image          String? 
  actualWaterLvl Int      @map("actual_water_lvl")
  lastWateredAt  DateTime @map("last_watered_at")
  nextWateringDate DateTime? @map("next_watering_date")
  sendWaterMailAlert Boolean  @map("send_water_mail_alert")

  // Relation : chaque Plant est lié à un User (1-N)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Relation : chaque Plant est lié à un Model (1-N)
  model  Model  @relation(fields: [modelId], references: [id])
  tasks Task[]
}

model Model {
  id                Int      @id @default(autoincrement())
  name              String
  description       String
  wateringFrequency Int
  waterLvlNeeded    Int      @map("water_lvl_needed")
  sunLvlNeeded      Int      @map("sun_lvl_needed")
  image             String?
  soil              String?
  temperature       String?
  pestResistant     String?   @map("pest_resistant")

  // Relation : un Model peut être utilisé par plusieurs Plant
  plants   Plant[]
  // Relation M-N : un Model peut être lié à plusieurs Disease via la table pivot
  diseases DiseaseModel[]
}

model DiseaseModel {
  diseaseId Int @map("disease_id")
  modelId   Int @map("model_id")

  // Relations vers Disease et Model
  disease Disease @relation(fields: [diseaseId], references: [id])
  model   Model   @relation(fields: [modelId], references: [id])

  // Clé primaire composite sur (diseaseId, modelId)
  @@id([diseaseId, modelId])
}

model Disease {
  id          Int    @id @default(autoincrement())
  name        String
  description String?
  severity    Int
  treatment   String?
  image       String?

  // Relation M-N : un Disease peut concerner plusieurs Model
  models DiseaseModel[]
}

model Task {
  id            Int      @id @default(autoincrement())
  userId        String   @map("user_id")
  plantId       Int      @map("plant_id")
  action        String
  dateOfAction  DateTime @map("date_of_action")
  severityLvl   String   @map("severity_lvl")
  isDone       Boolean

  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  plant  Plant @relation(fields: [plantId], references: [id], onDelete: Cascade)
  @@unique([plantId, action])
}